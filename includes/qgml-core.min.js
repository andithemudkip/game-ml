let randomID=n=>{let chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",token="";for(let i=0;i<n;i++)token+=chars[Math.floor(Math.random()*chars.length)];return token};class QGML{constructor(){this.p5=null,this.gameManager=null}static setup(config){this.width=config.width,this.height=config.height,this.debug=config.debug,this.gameManager=new this.GameManager(config),this.gameManager.createWorlds(),this.ctx=new QGML.Context,this.gameManager.createKeymappers(),this.preload=function(p){for(let i=0,texts=QGML.World.current.texts;i<texts.length;i++)texts[i].preload(p)},this.setup=function(p){QGML.ctx.setVar("p5",p),p.background(50),p.fill(255),p.frameRate(60);for(let i=0,actors=QGML.World.current.actors;i<actors.length;i++)actors[i].setup(p);for(let i=0,groups=QGML.World.current.groups;i<groups.length;i++)groups[i].setup(p);for(let i=0,texts=QGML.World.current.texts;i<texts.length;i++)texts[i].setup(p);QGML.gameManager.scripts[QGML.World.current.id]&&QGML.ctx.eval(QGML.gameManager.scripts[QGML.World.current.id].setup)},this.p5=new p5(QGML.createSketch(config),config.rootElementID)}static createSketch(config){const{width:width,height:height,assets:assets}=config;return function(p){p.preload=function(){for(let i=0,sheets=assets.spritesheets;i<sheets.length;i++)for(let j=0;j<sheets[i].frames.length;j++)assets.spritesheets[i].frames[j]=p.loadImage(sheets[i].frames[j]);for(let i=0,sprites=assets.sprites;i<sprites.length;i++)assets.sprites[i].image=p.loadImage(sprites[i].image);QGML.gameManager.assets=assets,QGML.preload(p)},p.setup=function(){p.createCanvas(width,height);QGML.setup(p)},p.draw=function(){QGML.debug&&p.frameCount%60==0&&performance.mark("start-of-draw"),p.background(50);for(let i=0,n=QGML.World.current.groups.length;i<n;i++)QGML.World.current.groups[i].update();for(let i=0,n=QGML.World.current.actors.length;i<n;i++)try{QGML.World.current.actors[i].draw(p)}catch(err){console.error(err)}for(let i=0,n=QGML.gameManager.currentTexts.length;i<n;i++)QGML.gameManager.currentTexts[i].draw(p);if(QGML.gameManager.keymappers[QGML.World.current.id]){for(let i=0,keys=Object.keys(QGML.gameManager.keymappers[QGML.World.current.id].keys.down),n=keys.length;i<n;i++)p.keyIsDown(keys[i])&&QGML.gameManager.keymappers[QGML.World.current.id].keys.down[keys[i]]();for(let i=0,groups=QGML.gameManager.keymappers[QGML.World.current.id].groups.down;i<groups.length;i++)groups[i].checkKeysDown(p);for(let i=0,keys=Object.keys(QGML.gameManager.keymappers[QGML.World.current.id].keys.up),n=keys.length;i<n;i++)p.keyIsDown(keys[i])||QGML.gameManager.keymappers[QGML.World.current.id].keys.up[keys[i]]();for(let i=0,groups=QGML.gameManager.keymappers[QGML.World.current.id].groups.up;i<groups.length;i++)groups[i].checkKeysUp(p)}QGML.gameManager.scripts[QGML.World.current.id]&&QGML.ctx.eval(QGML.gameManager.scripts[QGML.World.current.id].update);for(let queue=QGML.World.current.destroyQueue,i=queue.length-1;i>=0;i--)queue[i]instanceof QGML.Actor?(QGML.World.current.actors.splice(QGML.World.current.actors.indexOf(queue[i]),1),queue.splice(i,1)):queue[i]instanceof QGML.Text?(QGML.World.current.texts.splice(QGML.World.current.texts.indexOf(queue[i]),1),queue.splice(i,1)):queue[i]instanceof QGML.Group&&(QGML.World.current.groups.splice(QGML.World.current.groups.indexOf(queue[i]),1),queue.splice(i,1));if(QGML.debug&&(p.noStroke(),p.fill(0,0,0,150),p.rect(0,0,130,120),p.fill(255),p.text(Math.round(QGML.frameRate)+" fps (actual)",5,15),p.text(QGML.frameTime.toFixed(3)+" ms frametime",5,35),p.text(Math.floor(1e3/QGML.frameTime)+" fps (potential)",5,55),p.text(QGML.World.current.actors.length+" actor(s)",5,75),p.text(QGML.World.current.texts.length+" text(s)",5,95),p.text(QGML.World.current.groups.length+" group(s)",5,115),p.frameCount%60==0)){performance.measure("measure frame time","start-of-draw");let perf=performance.getEntriesByName("measure frame time");QGML.frameTime=perf[0].duration,QGML.frameRate=p.frameRate(),performance.clearMeasures()}},p.keyPressed=function(){if(QGML.gameManager.keymappers[QGML.World.current.id]){QGML.gameManager.keymappers[QGML.World.current.id].keys.pressed[p.keyCode]&&QGML.gameManager.keymappers[QGML.World.current.id].keys.pressed[p.keyCode]();for(let i=0,groups=QGML.gameManager.keymappers[QGML.World.current.id].groups.pressed;i<groups.length;i++)groups[i].checkKey(String.fromCharCode(p.keyCode).toLowerCase())}},p.keyReleased=function(){if(QGML.gameManager.keymappers[QGML.World.current.id]){QGML.gameManager.keymappers[QGML.World.current.id].keys.released[p.keyCode]&&QGML.gameManager.keymappers[QGML.World.current.id].keys.released[p.keyCode]();for(let i=0,groups=QGML.gameManager.keymappers[QGML.World.current.id].groups.released;i<groups.length;i++)groups[i].checkKey(String.fromCharCode(p.keyCode).toLowerCase())}}}}}QGML.frameRate=0,QGML.frameTime=0,QGML.Context=function(){var _gmlVars=QGML.gameManager?Object.assign({},QGML.gameManager.vars.global,QGML.gameManager.vars[QGML.gameManager.selectedWorld.id]):[];let _keys=Object.keys(_gmlVars);for(key of _keys)try{eval(`var ${key} = ${_gmlVars[key]};`)}catch(err){eval(`var ${key} = "${_gmlVars[key]}";`)}function spawn(entityClass,state,parentId){let toReturn=null,template=QGML.gameManager.actorTemplates.find(t=>t.self.id===entityClass);if(template){let instance=template.Create(state,parentId);QGML.World.current.actors.push(instance),toReturn=instance}return toReturn}function destroy(entity){if(entity instanceof QGML.Actor)entity.active=!1,QGML.World.current.destroyQueue.push(entity);else if(entity instanceof QGML.Group){let groups=function(group){let nrOfGroupsFound,grFound=[group],grArray=[group];do{nrOfGroupsFound=0;for(let i=grArray.length-1;i>=0;i--){for(let gr of QGML.World.current.groups)grArray[i].name===gr.parent&&(nrOfGroupsFound++,grFound.push(gr),grArray.push(gr));grArray.splice(i,1)}}while(0!=nrOfGroupsFound);return grFound}(entity);for(let actor of QGML.World.current.actors)groups.includes(actor.group)&&(actor.active=!1,QGML.World.current.destroyQueue.push(actor));for(let text of QGML.World.current.texts)groups.includes(text.group)&&(text.active=!1,QGML.World.current.destroyQueue.push(text));for(let group of groups)group.active=!1,QGML.World.current.destroyQueue.push(group)}else entity instanceof QGML.Text&&(entity.active=!1,QGML.World.current.destroyQueue.push(entity))}function overlaps(actor1,actor2){if(actor1 instanceof QGML.Actor&&actor2 instanceof QGML.Actor){if(actor1.active&&actor2.active){if(actor1.state.rotation||actor2.state.rotation){let allowTouch=!0,polygons=[actor1.getCorners(),actor2.getCorners()];const firstPolygonPositions=polygons[0],secondPolygonPositions=polygons[1];let minA,maxA,projected,minB,maxB;for(let i=0;i<polygons.length;i++){const polygon=polygons[i];for(let i1=0;i1<polygon.length;i1++){const i2=(i1+1)%polygon.length,p1=polygon[i1],p2=polygon[i2],normal={x:p2.y-p1.y,y:p1.x-p2.x};minA=maxA=void 0;for(let j=0;j<firstPolygonPositions.length;j++)projected=normal.x*firstPolygonPositions[j].x+normal.y*firstPolygonPositions[j].y,(!minA||projected<minA||!allowTouch&&projected===minA)&&(minA=projected),(!maxA||projected>maxA||!allowTouch&&projected===maxA)&&(maxA=projected);minB=maxB=void 0;for(let j=0;j<secondPolygonPositions.length;j++)projected=normal.x*secondPolygonPositions[j].x+normal.y*secondPolygonPositions[j].y,(!minB||projected<minB||!allowTouch&&projected===minB)&&(minB=projected),(!maxB||projected>maxB||!allowTouch&&projected===maxB)&&(maxB=projected);if(maxA<minB||!allowTouch&&maxA===minB||maxB<minA||!allowTouch&&maxB===minA)return!1}}return!0}{let pos1=actor1.getPosition(),pos2=actor2.getPosition();return pos1.x<pos2.x+actor2.state.size.width&&pos1.x+actor1.state.size.width>pos2.x&&pos1.y<pos2.y+actor2.state.size.height&&pos1.y+actor1.state.size.height>pos2.y}}return!1}console.log("Both arguments passed to `overlaps` must be QGML actors")}function loadWorld(str){QGML.gameManager.loadWorld(str)}function getPosition(entity){return entity.getPosition()}function dist(x1,y1,x2,y2){return x1.state&&y1.state?Math.hypot(getPosition(x1).x-getPosition(y1).x,getPosition(x1).y-getPosition(y1).y):Math.hypot(x2-x1,y2-y1)}function getActor(id){return QGML.World.current.actors.find(a=>a.id===id)}function getActorsByClass(cl){return QGML.World.current.actors.filter(a=>a.class===cl)}function getGroupsByClass(cl){return QGML.World.current.groups.filter(g=>g.class===cl)}function getGroup(id){return QGML.World.current.groups.find(g=>g.name===id)}this.eval=function(str,context){let _res;if(_res=context?eval(str).bind(context):eval(str),QGML.gameManager.vars[QGML.World.current.id])for(key of _keys)key in QGML.gameManager.vars[QGML.World.current.id]?QGML.gameManager.setVar(QGML.World.current.id,key,eval(key)):QGML.gameManager.setVar("global",key,eval(key));return _res},this.setVar=function(name,value){this[name]=value}},QGML.Keymapper=class{constructor(obj){this.keys={down:{},up:{},pressed:{},released:{}},this.groups={down:[],up:[],pressed:[],released:[]},Object.keys(obj).forEach(key=>{let opts=key.split("|"),keyCode=QGML.Keymapper.keyCodeFromString(opts[0]);if(keyCode)this.keys[opts[1]||"pressed"][keyCode]=QGML.ctx.eval(obj[key]);else{let group=QGML.Keymapper.groupFromString(opts[0],obj[key]);group&&this.groups[opts[1]||pressed].push(group)}})}static groupFromString(str,toexec){if(str.startsWith("[")&&str.endsWith("]")){let keys=(str=str.slice(1,str.length-1)).split(","),obj={keys:{},do:QGML.ctx.eval(toexec),checkKey(key){if(!(key in this.keys))return!1;{this.keys[key]=!0;let shouldExecute=!0;for(let k in this.keys)this.keys[k]||(shouldExecute=!1);if(shouldExecute){this.do();for(let k in this.keys)this.keys[k]=!1}}},checkKeysDown(p){let shouldExecute=!0;for(let k in this.keys)p.keyIsDown(QGML.Keymapper.keyCodeFromString(k))||(shouldExecute=!1);shouldExecute&&this.do()},checkKeysUp(p){let shouldExecute=!0;for(let k in this.keys)p.keyIsDown(QGML.Keymapper.keyCodeFromString(k))&&(shouldExecute=!1);shouldExecute&&this.do()}};for(let i=0;i<keys.length;i++)obj.keys[keys[i]]=!1;return obj}return null}static keyCodeFromString(str){let keyCode=0;return Number(str)?keyCode=Number(str):1===str.length?keyCode=str.toUpperCase().charCodeAt(0):Object.keys(QGML.Keymapper.keyTable).forEach(key=>{str.toUpperCase()===key&&(keyCode=QGML.Keymapper.keyTable[key])}),keyCode}},QGML.Keymapper.keyTable={BACKSPACE:8,DELETE:46,ENTER:13,RETURN:13,TAB:9,ESCAPE:27,SHIFT:16,CONTROL:17,OPTION:18,ALT:18,UP_ARROW:38,DOWN_ARROW:40,LEFT_ARROW:37,RIGHT_ARROW:39,SPACE:32},QGML.Text=class{constructor({group:group=null,value:value="",font:font,className:className=null,state:state="",id:id="default-text",customUpdate:customUpdate,customSetup:customSetup},worldObj){this.id=id,this.class=className,this.active=!0,this.group=worldObj.groups.find(grp=>grp.name===group),this.state={position:{x:0,y:0},size:12,color:null,stroke:null,rotation:0},this.originalState=state,this.originalValue=value,this.font=font,this.customUpdate=customUpdate,this.customSetup=customSetup}setParent(group){this.group=QGML.World.current.groups.find(grp=>grp.name===group)}getActive(){return this.group?!!this.group.getActive()&&this.active:this.active}setup(p){this.originalState&&(this.state=QGML.ctx.eval(this.originalState)),this.value=QGML.ctx.eval("`"+this.originalValue+"`"),this.customSetup&&QGML.ctx.eval(this.customSetup,this)(),this.customUpdate&&(this.customUpdate=QGML.ctx.eval(this.customUpdate,this))}getPosition(){return{x:this.state.position.x+(this.group?this.group.getPosition().x:0),y:this.state.position.y+(this.group?this.group.getPosition().y:0)}}preload(){this.font&&(this.font=this.font.name)}draw(p){if(this.getActive()){this.customUpdate&&this.customUpdate(),p.push();let pos=this.getPosition();p.translate(pos.x,pos.y+this.state.size/2),this.value=QGML.ctx.eval("`"+this.originalValue+"`"),this.state.stroke?(p.strokeWeight(this.state.stroke.weight),p.stroke(p.color(this.state.stroke.color))):p.noStroke(),this.state.color&&p.fill(p.color(this.state.color)),p.textSize(this.state.size),p.textStyle(this.state.style),p.textAlign(this.state.align),this.font&&p.textFont(this.font),p.rotate(this.state.rotation),p.text(this.value,0,-this.state.size),p.pop()}}},QGML.Actor=class{constructor({group:group=null,className:className=null,state:state="",id:id="default-actor",sprite:sprite,animator:animator,customUpdate:customUpdate,customSetup:customSetup},worldObj){this.id=id,this.sprite=sprite,this.animator=animator,this.class=className,this.active=!0,this.group=worldObj.groups.find(grp=>grp.name===group),this.state={position:{x:0,y:0},size:{width:0,height:0},rotation:0,color:null,stroke:null},this.originalState=state,this.scale={x:1,y:1,set(obj){Object.assign(this,obj)}},this.direction={x:1,y:1,set:(axis,value)=>{"horizontal"===axis?"left"===value||-1===value?this.direction.x=-1:"right"!==value&&1!==value||(this.direction.x=1):"vertical"===axis&&("up"===value||1===value?this.direction.x=1:"down"!==value&&-1!==value||(this.direction.x=-1))}},this.flip={horizontal:()=>{this.direction.x=-this.direction.x},vertical:()=>{this.direction.y=-this.direction.y}},this.customUpdate=customUpdate,this.customSetup=customSetup}setParent(group){this.group=QGML.World.current.groups.find(grp=>grp.name===group)}getActive(){return this.group?!!this.group.getActive()&&this.active:this.active}getCorners(){let pos=this.getPosition();pos={x:pos.x+this.state.size.width/2,y:pos.y+this.state.size.height/2};let rot=this.state.rotation||0,corners=[],points=[{x:-this.state.size.width/2,y:-this.state.size.height/2},{x:this.state.size.width/2,y:-this.state.size.height/2},{x:this.state.size.width/2,y:this.state.size.height/2},{x:-this.state.size.width/2,y:this.state.size.height/2}];for(let p of points){let rotatedX=p.x*Math.cos(rot)-p.y*Math.sin(rot),rotatedY=p.x*Math.sin(rot)+p.y*Math.cos(rot),x=rotatedX+pos.x,y=rotatedY+pos.y;corners.push({x:x,y:y})}return corners}setup(p){this.originalState&&(this.state=QGML.ctx.eval(this.originalState)),this.sprite=QGML.Sprite.Create(this.sprite),this.animator=QGML.Animator.Create(this.animator),this.customSetup&&QGML.ctx.eval(this.customSetup,this)(),this.customUpdate&&(this.customUpdate=QGML.ctx.eval(this.customUpdate,this))}getPosition(){return{x:this.state.position.x+(this.group?this.group.getPosition().x:0),y:this.state.position.y+(this.group?this.group.getPosition().y:0)}}getRotation(){return this.state.rotation}draw(p){if(this.getActive()){if(this.customUpdate&&this.customUpdate(),this.state.size.width&&this.state.size.height){p.push();let pos=this.getPosition();p.translate(pos.x+this.state.size.width/2,pos.y+this.state.size.height/2);let scale=this.scale;this.state.stroke?(p.strokeWeight(this.state.stroke.weight),p.stroke(p.color(this.state.stroke.color))):p.noStroke(),this.state.color?p.fill(p.color(this.state.color)):p.noFill(),p.rectMode(p.CENTER),p.imageMode(p.CENTER),p.rotate(this.state.rotation),p.scale(scale.x*this.direction.x,scale.y*this.direction.y),p.rect(0,0,this.state.size.width,this.state.size.height),this.animator?p.image(this.animator.getFrame(),0,0):this.sprite.get()&&p.image(this.sprite.get(),0,0),p.pop()}this.animator&&this.animator.update()}}},QGML.Template=class{constructor(self,type){this.self=self,this.type=type}Create(state,parent){let toReturn=null;switch(this.type){case"actor":let actor=new QGML.Actor(this.self,QGML.World.current);actor.setParent(parent),state&&(actor.state=state),actor.class=this.self.id,actor.id="actor-"+randomID(16),actor.setup(),toReturn=actor}return toReturn}},QGML.Animator=class{constructor({spritesheets:spritesheets}){this.spritesheets=spritesheets,this.selectedSheet=null;for(let i=0,keys=Object.keys(this.spritesheets);i<keys.length;i++)this.spritesheets[keys[i]].default&&(this.selectedSheet=keys[i],this.currentFrames=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frames,this.frameTime=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frameTime||1);if(!this.selectedSheet){let key=Object.keys(this.spritesheets)[0];this.selectedSheet=key,this.currentFrames=QGML.gameManager.findAsset("spritesheets",this.spritesheets[key].name).frames,this.frameTime=QGML.gameManager.findAsset("spritesheets",this.spritesheets[key].name).frameTime||1}this.currentFrame=0,this.count=0,this.lastAnimation=this.selectedSheet,this.shouldLoop=!0,this.afterPlayCb=()=>{}}update(){this.count++,this.count>this.frameTime&&(this.nextFrame(),this.count=0)}nextFrame(){this.currentFrame+1<this.currentFrames.length?this.currentFrame++:this.shouldLoop?this.currentFrame=0:(this.afterPlayCb(),this.set(this.lastAnimation))}getFrame(){return this.currentFrames[this.currentFrame]}play(name,cb=(()=>{})){for(let i=0,keys=Object.keys(this.spritesheets);i<keys.length;i++)keys[i]===name&&(this.selectedSheet=keys[i],this.currentFrames=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frames,this.frameTime=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frameTime||1,this.currentFrame=0,this.count=0,this.shouldLoop=!1,this.afterPlayCb=cb)}set(name,cb=(()=>{})){if(name!=this.selectedSheet)for(let i=0,keys=Object.keys(this.spritesheets);i<keys.length;i++)keys[i]===name&&(this.selectedSheet=keys[i],this.currentFrames=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frames,this.frameTime=QGML.gameManager.findAsset("spritesheets",this.spritesheets[keys[i]].name).frameTime||1,this.currentFrame=0,this.count=0,this.lastAnimation=this.selectedSheet,this.shouldLoop=!0,this.afterPlayCb=cb)}static Create(animator){return animator&&animator.spritesheets?new QGML.Animator(animator):null}},QGML.Sprite=class{constructor(obj){this.name=obj?obj.name:null,this.image=this.name?QGML.gameManager.findAsset("sprites",this.name).image:null}get(){return this.image}set(name){this.name=name,this.image=QGML.gameManager.findAsset("sprites",name).image}static Create(sprite){return new QGML.Sprite(sprite)}},QGML.Group=class{constructor({parent:parent=null,world:world="default-world",className:className=null,name:name="default-group",state:state={},customUpdate:customUpdate=null,customSetup:customSetup=null},worldObj){this.parent=parent,this.world=world,this.name=name,this.class=className,this.active=!0,this.state={position:{x:0,y:0},size:{width:0,height:0},rotation:0},this.originalState=state,this.customUpdate=customUpdate,this.customSetup=customSetup,this.absolutePosition=this.state.position}setParent(parent){this.parent=parent,this.parentObject=QGML.World.current.groups.find(g=>g.name===this.parent)}getPosition(){return this.absolutePosition}getRotation(){return this.state.rotation+(this.parent?this.parentObject.state.rotation:0)}setup(p){this.originalState&&(this.state=QGML.ctx.eval(this.originalState)),this.customSetup&&QGML.ctx.eval(this.customSetup,this)(),this.customUpdate&&(this.customUpdate=QGML.ctx.eval(this.customUpdate,this)),this.parentObject=QGML.World.current.groups.find(g=>g.name===this.parent)}getActive(){return this.parentObject?!!this.parentObject.active&&this.active:this.active}update(){this.absolutePosition={x:this.state.position.x+(this.parent?this.parentObject.state.position.x:0),y:this.state.position.y+(this.parent?this.parentObject.state.position.y:0)},this.customUpdate&&this.customUpdate()}},QGML.World=class{constructor({id:id="default-world",state:state={},groups:groups=[],actors:actors=[],texts:texts=[],events:events=[]}){this.id=id,this.state=state,this.groups=groups,this.actors=actors,this.texts=texts,this.events=events,this.destroyQueue=[],this.createEntities=this.createEntities.bind(this)}createEntities(){this.groups=this.groups.map(group=>new QGML.Group(group,this)),this.actors=this.actors.map(actor=>new QGML.Actor(actor,this)),this.texts=this.texts.map(text=>new QGML.Text(text,this))}},QGML.GameManager=class{constructor(config){this.config=config,this.keymappers={},this.scripts=config.scripts,this.assets=config.assets,this.actorTemplates=config["actor-templates"].map(t=>new QGML.Template(t,"actor")),this.vars=Object.assign({},config.vars),this.originalVars=Object.assign({},config.vars),this.defaultWorld=config.defaultWorld,this.selectedWorld=config.defaultWorld,this.loadWorld=this.loadWorld.bind(this),this.findWorld=this.findWorld.bind(this),this.createWorlds=this.createWorlds.bind(this),this.createKeymappers=this.createKeymappers.bind(this),this.findAsset=this.findAsset.bind(this)}createWorlds(){this.defaultWorld=this.config.defaultWorld,this.selectedWorld=this.defaultWorld,this.loadWorld(this.defaultWorld)}createKeymappers(){Object.keys(this.config.keymappers).forEach(key=>{this.keymappers[key]=new QGML.Keymapper(this.config.keymappers[key])})}setVar(world,name,value){this.vars[world][name]=value}loadWorld(world){if(this.worlds=this.config.worlds.map(world=>new QGML.World(world)),this.worlds.forEach(world=>world.createEntities()),this.selectedWorld=this.findWorld(world),this.vars[world]=Object.assign({},this.originalVars[world]),this.currentTexts=this.selectedWorld.texts,QGML.World.current=this.selectedWorld,QGML.ctx){let p5=QGML.ctx.p5;QGML.ctx=new QGML.Context,this.createKeymappers(),QGML.preload(p5),QGML.setup(p5),QGML.ctx.setVar("p5",p5)}}findWorld(id){return this.worlds.find(world=>world.id===id)}findAsset(type,name){return this.assets[type].find(a=>a.name===name)||{}}};
